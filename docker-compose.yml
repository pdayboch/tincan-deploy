services:
  db:
    image: postgres:17.4-alpine3.21
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_USER=${PG_USER}
    networks:
      - backend-network

  redis:
    image: redis:7.2.4
    volumes:
      - redis-data:/data
    networks:
      - backend-network

  backend:
    image: ${DOCKER_HUB_USERNAME}/tincan-backend:latest
    command: /rails/bin/docker-entrypoint ./bin/rails server
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_HOST=db
      - RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
      - PLAID_CLIENT_ID=${PLAID_CLIENT_ID}
      - PLAID_SECRET=${PLAID_SECRET}
      - REDIS_URL=${REDIS_URL}
    volumes:
      - ./log:/rails/log
    networks:
      - backend-network
    depends_on:
      - db
      - redis

  sidekiq:
    image: ${DOCKER_HUB_USERNAME}/tincan-backend:latest
    command: bundle exec sidekiq
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_HOST=db
      - RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
      - PLAID_CLIENT_ID=${PLAID_CLIENT_ID}
      - PLAID_SECRET=${PLAID_SECRET}
      - REDIS_URL=${REDIS_URL}
    volumes:
      - ./log:/rails/log
    networks:
      - backend-network
    depends_on:
      - db
      - redis
      - backend

  frontend:
    image: ${DOCKER_HUB_USERNAME}/tincan-frontend:latest
    networks:
      - frontend-network

  nginx:
    image: ${DOCKER_HUB_USERNAME}/tincan-nginx:latest
    ports:
      - "80:8080" # Map 8080 (container) to 80 (host)
    depends_on:
      - frontend
      - backend
    volumes:
      - ./ssl/certs:/etc/nginx/certs:ro
      - ./log:/var/log/nginx
    networks:
      - frontend-network
      - backend-network

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge

volumes:
  pgdata:
  redis-data:
